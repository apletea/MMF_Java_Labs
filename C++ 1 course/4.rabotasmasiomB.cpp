#include <iostream>
#include <clocale>
//Объявить массив вещественных чисел размера N (число N объявить как константу равную нескольким десятков тысяч). Проинициализировать значения элементов массива случайными числами из промежутка от -50 до 50.
using std::cin;
using std::cout;
using std::endl;

int xorshift128(int x)//рандом
 {
    int t;
    int a=13,b=15,c=5;
    t = x ^ (x << a);
    t = t ^ (t >> b);

    return x = x ^ (t << c);
}
void initialize (int mas[],int N)//инитиализация массива
{     mas[0]=5;
     for (int i=1;i<N;i++)
     {
         mas[i]=xorshift128(mas[i-1]);
     }
     for (int i=1;i<N;i++)
     {
         mas[i]=mas[i]%51;
     }

}
void couut (int mas[],int N) //вывод в обратном порядке
{
    for (int i=N;i>=0;i--)
    {
        cout<<mas[i]<<endl;
    }
}

void chetnechet (int mas[],int N)//вывод чётных потом нечтёных элементов масива
{    cout<<"Нечётные элементы массива:";
    for (int i=1;i<N;i+=2)
    {
        cout<<mas[i]<<"  ";
    }
    cout<<"Чётные элементы массива:";
    for (int i=0;i<N;i+=2)
    {
        cout<<mas[i]<<"  ";
    }
    cout<<""<<endl;
}
void polotr(int mas[],int N)//вывод кол-ва положительных и отрицательных эелементов масива
{
    int pol=0,otr=0;
    for (int i=0;i<N;i++)
    {
        if (mas[i]>=0){pol++;}
        else {otr++;}
    }
    cout<<"Кол-во положительных элементов:="<<pol<<endl;
    cout<<"Кол-во отрицательных элементов:="<<otr<<endl;

}
void mxmn (int mas[],int N)//вывод максимума и минимума
{int mx,mn;
  mx=mas[0];
  mn=mas[0];
    for (int i=0;i<N;i++)
    {
        if (mas[i]>mx){mx=mas[i];}
        if (mas[i]<mn){mn=mas[i];}
    }
    cout<<"максиальный элемент масива равен:="<<mx<<endl;
    cout<<" минмальный элемент масива равен:="<<mn<<endl;

}
void kolvomxmn (int mas[],int N)//вывод количества максимальных и минимальных эелементов массива
{
    int j=0,g=0,mx,mn;
    mx=mas[0];
    mn=mas[0];
    for (int i=0;i<N;i++)
    {
        if (mas[i]==mx){g++;}
        if (mas[i]>mx){mx=mas[i];g=1;}

        if (mas[i]==mn){j++;}
        if (mas[i]<mn){mn=mas[i];j=1;}
    }
    cout<<"Кол-во максимальных элементов:="<<g<<endl;
    cout<<"Кол-во минимальных элементов:="<<j<<endl;
}
void perestroyka (int masB[],int mas[],int N)//"Перестроить" массив следующим образом :заполнить вспомогательный массив В в котором положительные значения массива А переместить в начало В, отрицательные переместить в конец массива В
{
    int j=0;
    int k=N-1;
    for (int i=0;i<N;i++)
    {
        if (mas[i]>=0){masB[j]=mas[i];j++;}
        else {masB[k]=mas[i];k--;}
    }
}
void perestroykaB (int mas[],int N)//аналогично предыдущей задаче "перестроить" массив А "на месте" (т.е. БЕЗ использования массива В) следующим образом положительные значения массива А переместить в начало А, отрицательные переместить в конец массива А.
{   int c;
    int j=N;
    for (int i=0;i<N;i++)
    {
        if (mas[i]<0)
        {
            for ( j=N;j>i;j--)
            {
                if (mas[j]>=0)
                {
                    c=mas[i];
                    mas[i]=mas[j];
                    mas[j]=c;

                }
            }
        }
    }
}


int main()
{  const int N=22563;
   setlocale(LC_ALL,"Russian");
   int mas[N];
   initialize(mas,N);//инитиализация массива
   couut(mas,N);//вывод в обратном порядке
   chetnechet(mas,N);//вывод нечётных элементов, а затем чётных
   polotr(mas,N);//кол-во положительных и отрицательных элементов массива
   mxmn(mas,N);//максимальный и минимальныый эелемент масива
   kolvomxmn(mas,N);//вывод количества максимальных и минимальных эелементов массива
   int B=N;
   int masB[B];
   perestroyka(masB,mas,N);//"Перестроить" массив следующим образом :заполнить вспомогательный массив В в котором положительные значения массива А переместить в начало В, отрицательные переместить в конец массива В
   perestroykaB(mas,N);//аналогично предыдущей задаче "перестроить" массив А "на месте" (т.е. БЕЗ использования массива В) следующим образом положительные значения массива А переместить в начало А, отрицательные переместить в конец массива А.
   return 0;
}

